Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->   Type-specifier #push  #declare_id ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime ->  ; #finish_var_declare | [  NUM #push ]  ; #end_array_declare
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int ID Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [ ] | EPSILON
Compound-stmt -> { #into_scope Declaration-list Statement-list } #outo_scope
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | break ; | ;
Selection-stmt -> if ( Expression ) #save_if Statement Else-stmt
Else-stmt -> endif #end_simple_if | else #save_if_else Statement endif #end_if_else
Iteration-stmt -> repeat #label Statement until ( Expression ) #jump_repeat
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond |  ID #push B
B -> = Expression #assign | [ Expression ] #indirect_adr H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C ->  Relop #push Additive-expression #compare_operate | EPSILON
Relop ->  < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D ->  Addop #push Term #operate D | EPSILON
Addop ->  + | -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G ->  * #push Factor #operate G | EPSILON
Factor -> ( Expression ) |  ID #push Var-call-prime |  NUM #push
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] #indirect_adr | EPSILON
Factor-prime -> ( Args ) | EPSILON
Factor-zegond -> ( Expression ) | #push_num NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON
